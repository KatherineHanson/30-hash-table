'use strict'

const BST = require('../model/binary-search-tree.js')

describe('binary search tree', () => {
  test('It should have a value and left and right should be null', () => {
    let bst = new BST(4)
    expect(bst.value).toBe(4)
    expect(bst.right).toBe(null)
    expect(bst.left).toBe(null)
  })

  test('It should have a value and left and right should be populated', () => {
    let bst = new BST()
    bst.insert(4)
    bst.insert(2)
    console.log(bst)
    expect(bst.value).toBe(4)
    expect(bst.left.value).toBe(2)
    expect(bst.left.right).toBe(null)
    expect(bst.left.left).toBe(null)
  })

  test('It should have a value and left and right should be populated', () => {
    let bst = new BST()
    bst.insert(4)
    bst.insert(2)
    bst.insert(6)
    bst.insert(1)
    bst.insert(3)
    bst.insert(5)
    bst.insert(7)
    console.log(bst)
    expect(bst.value).toBe(4)
    expect(bst.left.value).toBe(2)
    expect(bst.right.value).toBe(6)
    expect(bst.left.left.value).toBe(1)
    expect(bst.left.right.value).toBe(3)
    expect(bst.right.left.value).toBe(5)
    expect(bst.right.right.value).toBe(7)
  })

  // test('It should have the value searched', () => {
  //   let bst = new BST()
  //   bst.insert(4)
  //   bst.insert(2)
  //   bst.insert(6)
  //   bst.insert(1)
  //   bst.insert(3)
  //   bst.insert(5)
  //   bst.insert(7)
  //   let result1 = bst.find(node => node.value === 4)
  //   expect(result1).toBe(4)
  //   // let result2 = bst.find(node => node.value === 2)
  //   // expect(result2).toBe(2)
  // })

  // test('It should have the value searched removed', () => {
  //   let bst = new BST()
  //   bst.insert(4)
  //   bst.insert(2)
  //   bst.insert(6)
  //   bst.insert(1)
  //   bst.insert(3)
  //   bst.insert(5)
  //   bst.insert(7)
  //   let result = bst.remove(3)
  //   console.log(result)
  //   // expect(result.value).toBe(3)
  // })
})
